name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Cross-platform testing
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: stable
          - os: windows-latest
            rust: stable
          - os: macos-latest
            rust: stable
          - os: ubuntu-latest
            rust: beta

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-dev

    - name: Install Python (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install python

    - name: Install Python (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --lib --release

    - name: Run property tests
      run: cargo test --test property_tests --release

    - name: Run differential tests
      run: cargo test --test differential_tests --release

    - name: Run comprehensive verification
      run: cargo test --test comprehensive_verification --release

  # Performance regression detection
  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-dev

    - name: Run benchmarks
      run: cargo bench --all

    - name: Check for performance regressions
      run: |
        # This will fail if performance regresses by more than 5%
        cargo bench --all -- --save-baseline main
        cargo bench --all -- --load-baseline main --regression-threshold 0.05

  # Fuzz testing
  fuzz:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Run fuzz tests
      run: |
        cd fuzz
        cargo fuzz run lucas_lehmer_fuzz -- -max_total_time=300
        cargo fuzz run mod_mp_fuzz -- -max_total_time=300

  # Security audit
  audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Documentation
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Check documentation
      run: cargo doc --no-deps --all-features --document-private-items

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-dev

    - name: Run integration tests
      run: |
        # Test Python bindings
        cargo build --release
        python3 examples/python_usage.py

    - name: Test CLI
      run: |
        cargo build --release
        echo "31" > candidates.txt
        timeout 60s cargo run --release || true

  # Memory safety checks
  memory-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install valgrind
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Run memory checks
      run: |
        cargo build --release
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
          --verbose --log-file=valgrind-out.txt \
          target/release/primality_jones || true
        cat valgrind-out.txt

  # Code coverage
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install grcov
      run: |
        wget -O - -q https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar -xjf -
        sudo mv grcov /usr/local/bin/

    - name: Generate coverage
      run: |
        export CARGO_INCREMENTAL=0
        export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
        export RUSTDOCFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
        cargo test --lib
        grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing -o ./coverage/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true 